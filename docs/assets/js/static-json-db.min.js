class StaticJsonDb{constructor(t,s={}){this.options={case_insensitive_fs:!1,...s},this.dir=t,this.resetCache(),this.getShardPromises={}}resetCache(){this.Cache={d:{},shards:{},shards_to_write:{}}}async getAll(t="",s={},e=!1,i){!e&&this.options.case_insensitive_fs&&(t=t.replace(/[A-Z]/g,"($&"));let r=await this.findShard(t,void 0,i);for(let[i,h]of Object.entries(r.d))(e||i.startsWith(t))&&(this.options.case_insensitive_fs&&(i=i.replace(/\(/g,"")),s[i]=h);if(i&&!1===i())return s;let h=[];for(let a of r.s)(e||a.startsWith(t))&&h.push(this.getAll(a,s,!0,i));return await Promise.all(h),s}async get(t,s){return this.options.case_insensitive_fs&&(t=t.replace(/[A-Z]/g,"($&")),(await this.findShard(t,void 0,s)).d[t]}shardPath(t){if(t.length>0){let s=this.dir;for(let e=0;e<t.length;e+=2)s=new URL(t.substring(e,e+2),s+"/");return s+".json"}return new URL("index.json",this.dir+"/")}async findShard(t,s="",e){let i=await this.getShard(s);if(i.d[t])return i;{if(e&&!1===e())return i;let s=i.s.find(s=>t.startsWith(s));return s?this.findShard(t,s):i}}async getShard(t){if(this.Cache.shards[t])return this.Cache.shards[t];{this.getShardPromises[t]=this.getShardPromises[t]||this.getShard2(t);let s=await this.getShardPromises[t];return delete this.getShardPromises[t],s}}async getShard2(t){let s=await this.getShard3(t),e={d:{},s:[],key:t};for(let[i,r]of Object.entries(s.d))e.d[t+i]=r;for(let i of s.s)e.s.push(t+i);return this.Cache.shards[t]=e,e}getShard3(t){return fetch(this.shardPath(t)).then(t=>t.json())}}